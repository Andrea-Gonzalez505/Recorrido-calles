import random
import time

def horizontal(velocidad, delay, posicion):
    for i in range(velocidad):
        print(" " * posicion + "-", end="", flush=True)
        time.sleep(delay)
    print()  # Salto de línea final

def recta(velocidad, delay, posicion):
    for i in range(velocidad):
        print(" " * posicion + "|", flush=True)
        time.sleep(delay)

def diagonal_derecha(velocidad, delay, posicion):
    espacios = posicion
    for i in range(velocidad):
        print(" " * espacios + "\\", flush=True)
        time.sleep(delay)
        espacios += 1

def diagonal_izquierda(velocidad, delay, posicion):
    espacios = posicion
    for i in range(velocidad):
        print(" " * espacios + "/", flush=True)
        time.sleep(delay)
        espacios -= 1

def obtener_ruta(tiempo_actual):
    if 0 <= tiempo_actual <= 19:
        return 0
    elif 20 <= tiempo_actual <= 39:
        return 1
    else:
        return 2

def avanzar(movimiento, distancia, delay, posicion):
    if movimiento == "-":
        horizontal(distancia, delay, posicion)
        return posicion + distancia
    elif movimiento == "|":
        recta(distancia, delay, posicion)
        return posicion
    elif movimiento == "\\":
        diagonal_derecha(distancia, delay, posicion)
        return posicion + distancia
    elif movimiento == "/":
        diagonal_izquierda(distancia, delay, posicion)
        return posicion - distancia

def simular_recorrido(recorrido, vias, r_vias, recorridoSel, delay, tanque):
    posicion = 0
    distancia_total = sum(recorrido[recorridoSel])  # Suma total de kilómetros

    # Mostrar solo el nombre de la ruta antes de dibujar
    print("\nRuta seleccionada:")
    for tramo in r_vias[recorridoSel]:
        nombre_via = next((v["NOMBRE"] for v in vias if v["NUMERO"] == tramo), None)
        if nombre_via:
            print(f"- {nombre_via}")

    print("\nDibujando recorrido...\n")

    # Dibujar el recorrido manteniendo continuidad visual
    for tramo, distancia in zip(r_vias[recorridoSel], recorrido[recorridoSel]):
        movimiento = next((v["MOVIMIENTO"] for v in vias if v["NUMERO"] == tramo), None)
        if movimiento:
            posicion = avanzar(movimiento, distancia, delay, posicion)
            tanque -= distancia * 0.5  # Reducir tanque por cada km

    print(f"\nRecorrido completado. Combustible restante: {tanque:.2f} L")

def main():
    tiempo_actual = random.randint(0, 59)
    ruta_index = obtener_ruta(tiempo_actual)
    tanque = round(random.uniform(35, 100), 2)
    delay = float(input("Ingrese el retraso en segundos (ej. 0.1 para 100ms): "))/ 1000

    print(f"Tanque de combustible inicial: {tanque} L")

    recorrido = [[12, 7, 12, 0], [4, 3, 10, 4], [10, 7, 6, 0]]
    vias = [
        {"NUMERO": 1, "NOMBRE": "Autopista norte", "MOVIMIENTO": "-"},
        {"NUMERO": 2, "NOMBRE": "NQS", "MOVIMIENTO": "\\"},
        {"NUMERO": 3, "NOMBRE": "Avenida Boyacá", "MOVIMIENTO": "\\"},
        {"NUMERO": 4, "NOMBRE": "Calle 26", "MOVIMIENTO": "/"},
        {"NUMERO": 5, "NOMBRE": "Calle 100", "MOVIMIENTO": "\\"},
        {"NUMERO": 6, "NOMBRE": "Calle 170", "MOVIMIENTO": "|"}
    ]
    r_vias = [[1, 2, 4, 0], [1, 6, 3, 4], [1, 5, 4, 0]]

    simular_recorrido(recorrido, vias, r_vias, ruta_index, delay, tanque)

main()
