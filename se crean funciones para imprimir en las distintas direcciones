"""from pybricks.hubs import EV3Brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor,
                                InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile
"""
import random
import time


# Inicializar el EV3 Brick
#ev3 = EV3Brick()

####################################################################################################

def obtener_ruta(tiempo_actual):
    """Determina la ruta según el tiempo transcurrido."""
    if 0 <= tiempo_actual <= 19:
        return ["Autopista", "Kr 30", "Calle 26"]
    elif 20 <= tiempo_actual <= 39:
        return ["Autopista", "Calle 170", "Avenida Boyacá", "Calle 26"]
    else:
        return ["Autopista", "Calle 100", "Kr 68", "Calle 26"]

def lanzar_dado():
    dado = random.randint(0,6)
    return dado

def horizontal(velocidad):
    for i in range(velocidad):
        print("-", end = "")

def recta(velocidad):
    """ Imprime una línea recta hacia abajo con la velocidad indicada. 
        (int) -> None
    """
    for i in range(velocidad):
        print("|")

def diagonal_derecha(velocidad):
    """ 
    Imprime una línea en diagonal hacia la derecha con la velocidad indicada. \\
    (int) -> None
    """
    for i in range(velocidad):
        print(" " * i + "\\")

def diagonal_izquierda(velocidad):
    """ Imprime una línea en diagonal hacia la izquierda con la velocidad indicada. /
        (int) -> None
    """
    for i in range(velocidad):
        print(" " * (velocidad - i - 1) + "/")

def cantidad_imprimida(dado):
    for i in range(dado):
        horizontal(1)

def semaforo_l():
    conte = 0
    semaforos = [] 
    while conte < 5:
        val = random.randint(1,3)
        semaforos.append(val)
        conte = conte + 1
    return semaforos

def kr30(semaforo,tanque,velocidad):
    kilom = 0
    for i in range(25):
        kilom = velocidad
        if kilom <= 12:
            horizontal()
        elif kilom > 12 and kilom <= 19:
            diagonal_derecha()
        elif kilom > 19:
            diagonal_izquierda()

def cll170(semaforo,tanque,velocidad):
    kilom = 0
    for i in range(23):
        kilom = velocidad
        if kilom <= 10:
            horizontal()
        elif kilom > 10 and kilom <= 17:
            diagonal_derecha()
        elif kilom > 17:
            diagonal_izquierda()

def cll100(semaforo,tanque,velocidad):
    kilom = 0
    for i in range(21):
        kilom = velocidad
        if kilom <= 4:
            horizontal()
        elif kilom > 4 and kilom <= 7:
            recta(velocidad)
        elif kilom > 7 and kilom <= 17:
            diagonal_derecha()
        elif kilom > 17:
            diagonal_izquierda()

def main():
    """"
    # Solicitar tiempo de espera y convertirlo a segundos
    #tiempo_espera = int(input("Ingrese el tiempo de espera entre jugadas (ms): ")) / 1000

    #Inicializar valores del tanque y tiempo aleatorio
    tanque = round(random.uniform(35, 100), 2)
    tiempo_actual = random.randint(0, 59)
    ruta = obtener_ruta(tiempo_actual)
    print(ruta)
    
    semaforo = semaforo_l()
    print(semaforo)
    
    velocidad = random.randint(0,6)
    impri_horizontal = horizontal(velocidad)
    ruta_K30 = kr30(semaforo,tanque,velocidad,impri_horizontal)

    if 0 <= tiempo_actual <= 19:
       ruta_K30
       
    
    n = int(input("SI: "))
    d = 0
    while d < n:
        dado = lanzar_dado()
        print(dado)
        cantidad_imprimida(dado)  
        d = d + 1"
    
    """

main()
