import random
import time

def lanzar_dado():
    """Genera un n칰mero aleatorio entre 1 y 6 (valor de un dado)."""
    return random.randint(1, 6)

def horizontal(distancia, delay, posicion):
    """Imprime un movimiento horizontal poco a poco."""
    for _ in range(distancia):
        print("-", end="", flush=True)
        time.sleep(delay)
    return posicion + distancia

def recta(distancia, delay, posicion):
    """Imprime un movimiento en l칤nea recta (vertical)."""
    for _ in range(distancia):
        print(" " * posicion + "|", flush=True)
        time.sleep(delay)
    return posicion

def diagonal_derecha(distancia, delay, posicion):
    """Imprime un movimiento en diagonal hacia la derecha en una l칤nea continua."""
    for _ in range(distancia):
        print(" " * posicion + "\\", flush=True)
        time.sleep(delay)
        posicion += 1
    return posicion

def diagonal_izquierda(distancia, delay, posicion):
    """Imprime un movimiento en diagonal hacia la izquierda en una l칤nea continua."""
    for _ in range(distancia):
        print(" " * posicion + "/", flush=True)
        time.sleep(delay)
        posicion -= 1
    return posicion

def generar_semaforos_para_ruta(vias_ruta, vias, semaforos):
    """Asigna sem치foros aleatorios a una ruta espec칤fica y guarda su estado inicial"""
    semaforos_ruta = []
    
    for via in vias_ruta:
        # Probabilidad del 70% de que haya un sem치foro en esta v칤a
        if random.random() < 0.7 and via != 0:
            # Encontrar sem치foros que pertenecen a esta v칤a
            nombre_via = next((v["NOMBRE"] for v in vias if v["NUMERO"] == via), None)
            semaforos_via = [s for s_id, s in semaforos.items() if s["via"] == nombre_via]
            
            if semaforos_via:
                # Elegir uno aleatorio si hay varios
                semaforo = random.choice(semaforos_via)
                
                # Asignar un estado inicial aleatorio (1=Verde, 2=Amarillo, 3=Rojo)
                estado_inicial = random.randint(1, 3)
                
                # Asignar turnos seg칰n el estado inicial
                turnos_iniciales = 5 if estado_inicial == 1 else (3 if estado_inicial == 2 else 1)
                
                # Guardar el sem치foro con su estado inicial y posici칩n
                semaforos_ruta.append({
                    "via": via,
                    "nombre_via": nombre_via,
                    "distancia_km": semaforo["distancia_km"],
                    "estado": estado_inicial,
                    "estado_inicial": estado_inicial,  # Guardamos el estado inicial para referencia
                    "turnos_restantes": turnos_iniciales,
                    "turnos_iniciales": turnos_iniciales  # Guardamos los turnos iniciales para referencia
                })
    
    return semaforos_ruta

def actualizar_estado_semaforo(semaforo):
    """Actualiza el estado de un sem치foro cuando pasa un turno"""
    semaforo["turnos_restantes"] -= 1
    
    if semaforo["turnos_restantes"] <= 0:
        # Cambiar de estado cuando se acaban los turnos
        if semaforo["estado"] == 1:  # Verde -> Amarillo
            semaforo["estado"] = 2
            semaforo["turnos_restantes"] = 3
        elif semaforo["estado"] == 2:  # Amarillo -> Rojo
            semaforo["estado"] = 3
            semaforo["turnos_restantes"] = 1
        elif semaforo["estado"] == 3:  # Rojo -> Verde
            semaforo["estado"] = 1
            semaforo["turnos_restantes"] = 5
    
    return semaforo

def mostrar_estado_semaforo(estado):
    """Muestra el estado del sem치foro de forma visual y textual"""
    if estado == 1:
        return "游릭 Verde (5 turnos)"
    elif estado == 2:
        return "游리 Amarillo (3 turnos)"
    else:
        return "游댮 Rojo (1 turno)"

def avanzar(movimiento, distancia_total, delay, posicion, semaforos_via, km_acumulados):
    """Avanza por el tramo seg칰n el dado, mostrando el progreso paso a paso, considerando sem치foros"""
    km_recorridos = 0
    pausar_por_semaforo = False
    semaforos_en_rojo = []

    # Verificar sem치foros al inicio del tramo
    for s in semaforos_via:
        if abs(s["distancia_km"] - km_acumulados) < 0.1:
            if s["estado"] == 3:  # Rojo
                pausar_por_semaforo = True
                semaforos_en_rojo.append(s)

    while distancia_total > 0:
        # Tirar el dado para determinar cu치nto avanzamos
        tirada = lanzar_dado()
        avanzar_distancia = min(tirada, distancia_total)
        
        # Calcular pr칩xima posici칩n para verificar sem치foros
        km_proximos = km_acumulados + km_recorridos + avanzar_distancia
        
        # Verificar si hay sem치foros en el camino que vamos a recorrer
        for semaforo in semaforos_via:
            km_semaforo = semaforo["distancia_km"]
            # Si estamos a punto de pasar un sem치foro o estamos exactamente en 칠l
            if (km_acumulados + km_recorridos < km_semaforo <= km_proximos):
                # Actualizamos el estado despu칠s de cada tirada (antes de verificar)
                semaforo = actualizar_estado_semaforo(semaforo)
                if semaforo["estado"] == 3:  # Si es rojo
                    avanzar_distancia = km_semaforo - (km_acumulados + km_recorridos)
                    pausar_por_semaforo = True
                    semaforos_en_rojo.append(semaforo)
        
        # Actualizar el resto de sem치foros tambi칠n
        for semaforo in semaforos_via:
            if semaforo not in semaforos_en_rojo:
                semaforo = actualizar_estado_semaforo(semaforo)

        if movimiento == "-":
            posicion = horizontal(avanzar_distancia, delay, posicion)
        elif movimiento == "|":
            posicion = recta(avanzar_distancia, delay, posicion)
        elif movimiento == "\\":
            posicion = diagonal_derecha(avanzar_distancia, delay, posicion)
        elif movimiento == "/":
            posicion = diagonal_izquierda(avanzar_distancia, delay, posicion)

        distancia_total -= avanzar_distancia
        km_recorridos += avanzar_distancia
        
        # Manejar sem치foros en rojo despu칠s de imprimir el movimiento
        if pausar_por_semaforo:
            for semaforo in semaforos_en_rojo:
                # Solo mostrar el sem치foro en rojo pero no el mensaje de espera
                print(f"\nSem치foro en {semaforo['nombre_via']} Km {semaforo['distancia_km']}: {mostrar_estado_semaforo(semaforo['estado'])}")
                
                # Calcular cu치ntos turnos hay que esperar para que el sem치foro cambie a verde
                turnos_espera = 0
                if semaforo['estado'] == 3:  # Rojo
                    turnos_espera = semaforo['turnos_restantes']  # Esperar lo que queda de rojo
                    if turnos_espera == 0:
                        turnos_espera = 1  # Al menos un turno
                    
                # Esperar silenciosamente el tiempo correspondiente a los turnos
                tiempo_espera = turnos_espera * 1.0  # 1 segundo por turno
                time.sleep(tiempo_espera)
                
                # Actualizar el sem치foro despu칠s de la espera
                for _ in range(turnos_espera):
                    semaforo = actualizar_estado_semaforo(semaforo)
                
                print(f"Sem치foro cambiado a {mostrar_estado_semaforo(semaforo['estado'])}")
            
            semaforos_en_rojo = []
            pausar_por_semaforo = False
        
        time.sleep(0.5)  # Esperar antes de la siguiente tirada

    if movimiento == "-":
        print()  # Salto de l칤nea al terminar la l칤nea horizontal

    return posicion, km_recorridos

def simular_recorrido(recorrido, vias, r_vias, recorridoSel, delay, tanque, semaforos):
    """Ejecuta la simulaci칩n del recorrido usando los valores del dado y considerando sem치foros"""
    posicion = 0
    km_total = 0
    consumo_total = 0
    
    # Generar sem치foros aleatorios para esta ruta
    semaforos_ruta = generar_semaforos_para_ruta(r_vias[recorridoSel], vias, semaforos)
    
    print("\nRuta seleccionada:")
    for tramo in r_vias[recorridoSel]:
        if tramo != 0:  # Evitar el tramo 0 que es vac칤o
            nombre_via = next((v["NOMBRE"] for v in vias if v["NUMERO"] == tramo), None)
            if nombre_via:
                print(f"- {nombre_via}")
    
    # Mostrar los sem치foros iniciales antes del recorrido
    print(f"\nSem치foros en la ruta ({len(semaforos_ruta)}):")
    for s in semaforos_ruta:
        print(f"- Sem치foro en {s['nombre_via']} Km {s['distancia_km']}: {mostrar_estado_semaforo(s['estado_inicial'])}")

    print("\nIniciando recorrido...\n")

    for tramo, distancia in zip(r_vias[recorridoSel], recorrido[recorridoSel]):
        if tramo == 0 or distancia == 0:  # Saltar tramos vac칤os
            continue
            
        nombre_via = next((v["NOMBRE"] for v in vias if v["NUMERO"] == tramo), None)
        movimiento = next((v["MOVIMIENTO"] for v in vias if v["NUMERO"] == tramo), None)
        
        if movimiento:
            # Eliminar mensaje de entrada a la v칤a
            # print(f"\nEntrando a {nombre_via} - Distancia: {distancia} km")
            
            # Filtrar solo los sem치foros de esta v칤a
            semaforos_via = [s for s in semaforos_ruta if s["via"] == tramo]
            
            posicion, km_recorridos = avanzar(movimiento, distancia, delay, posicion, semaforos_via, km_total)
            consumo = km_recorridos * 0.5
            tanque -= consumo  # Reducir tanque seg칰n los km avanzados
            km_total += km_recorridos  # Sumar al total
            consumo_total += consumo
            
            # Eliminar mensaje de consumo
            # print(f"Consumo: {consumo:.2f}L - Combustible restante: {tanque:.2f}L")

            if tanque <= 0:
                print("\n춰Se acab칩 el combustible! El veh칤culo se detiene.")
                return

    print(f"\nRecorrido completado.")
    print(f"Total de kil칩metros recorridos: {km_total} km")
    print(f"Consumo total: {consumo_total:.2f}L")
    print(f"Combustible restante: {tanque:.2f}L")

def main():
    tiempo_actual = random.randint(0, 59)
    ruta_index = tiempo_actual // 20  # Obtiene 0, 1 o 2
    tanque = round(random.uniform(35, 100), 2)
    delay = float(input("Ingrese el retraso en segundos (ej. 0.1 para 100ms): ")) / 1000

    print(f"\nTanque de combustible inicial: {tanque} L")

    recorrido = [
        [12, 7, 12, 0], 
        [4, 3, 10, 4], 
        [10, 7, 6, 0]
    ]

    vias = [
        {"NUMERO": 1, "NOMBRE": "Autopista norte", "MOVIMIENTO": "-"},
        {"NUMERO": 2, "NOMBRE": "NQS", "MOVIMIENTO": "\\"},
        {"NUMERO": 3, "NOMBRE": "Avenida Boyac치", "MOVIMIENTO": "\\"},
        {"NUMERO": 4, "NOMBRE": "Calle 26", "MOVIMIENTO": "/"},
        {"NUMERO": 5, "NOMBRE": "Calle 100", "MOVIMIENTO": "\\"},
        {"NUMERO": 6, "NOMBRE": "Calle 170", "MOVIMIENTO": "|"}
    ]

    r_vias = [
        [1, 2, 4, 0], 
        [1, 6, 3, 4], 
        [1, 5, 4, 0]
    ]
 
    semaforos = {
        1: {"via": "Avenida Boyac치", "orientacion": "Norte-sur", "distancia_km": 2},
        2: {"via": "Avenida Boyac치", "orientacion": "Norte-sur", "distancia_km": 5},
        3: {"via": "NQS", "orientacion": "Norte-sur", "distancia_km": 4},
        4: {"via": "Calle 26", "orientacion": "Oriente-occidente", "distancia_km": 1},
        5: {"via": "Calle 100", "orientacion": "Norte-sur", "distancia_km": 6},
        6: {"via": "Autopista norte", "orientacion": "Norte-sur", "distancia_km": 3},
        7: {"via": "Autopista norte", "orientacion": "Norte-sur", "distancia_km": 8},
        8: {"via": "Calle 170", "orientacion": "Oriente-occidente", "distancia_km": 2}
    }

    print(f"Ruta seleccionada: {ruta_index + 1}")
    simular_recorrido(recorrido, vias, r_vias, ruta_index, delay, tanque, semaforos)
    
main()
