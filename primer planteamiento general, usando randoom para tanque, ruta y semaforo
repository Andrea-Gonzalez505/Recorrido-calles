"""from pybricks.hubs import EV3Brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor,
                                InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile
"""
import random
import time


# Inicializar el EV3 Brick
#ev3 = EV3Brick()

####################################################################################################
def obtener_ruta(tiempo_actual):
    """Determina la ruta según el tiempo transcurrido."""
    if 0 <= tiempo_actual <= 19:
        return ["Autopista", "Kr 30", "Calle 26"]
    elif 20 <= tiempo_actual <= 39:
        return ["Autopista", "Calle 170", "Avenida Boyacá", "Calle 26"]
    else:
        return ["Autopista", "Calle 100", "Kr 68", "Calle 26"]

def semaforo_l():
    conte = 0
    semaforos = [] 
    while conte < 5:
        val = random.randint(1,3)
        semaforos.append(val)
        conte = conte + 1
    return semaforos

def horizontal(velocidad):
    for i in range(velocidad):
        print("-", end = "")

def kr30(semaforo,tanque,velocidad,impri_horizontal):
    kilom = 0
    for i in range(25):
        kilom = velocidad
        if kilom == 12:
            impri_horizontal
        elif kilom 

    



def main():
    # Solicitar tiempo de espera y convertirlo a segundos
    #tiempo_espera = int(input("Ingrese el tiempo de espera entre jugadas (ms): ")) / 1000

    #Inicializar valores del tanque y tiempo aleatorio
    tanque = round(random.uniform(35, 100), 2)
    tiempo_actual = random.randint(0, 59)
    ruta = obtener_ruta(tiempo_actual)
    print(ruta)
    
    semaforo = semaforo_l()
    print(semaforo)
    
    velocidad = random.randint(0,6)
    impri_horizontal = horizontal(velocidad)
    ruta_K30 = kr30(semaforo,tanque,velocidad,impri_horizontal)

    if 0 <= tiempo_actual <= 19:
        ruta_K30
main()
